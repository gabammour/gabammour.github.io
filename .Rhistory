#' @description Cette fonciton prend une liste de triangle et renvoie une liste
#' composé des 4 triangles issus de la décomposition de Sierpinski.
#'
#' @param liste_triangle Une liste de coordonées de triangles
#'
#' @return liste 4 fois plus grandes, on applique l'algorithme de Sierpinski aux
#' triangles donnés en entrée.
#' @export
#'
divide_list_triangle <- function(liste_triangle){
sous_liste <- list()
for (i in liste_triangle){
sous_liste <- append(sous_liste,divide_triangle(i))
}
return(sous_liste)
}
#' distance_cart : distance cartèsienne
#' @description Cette fonction calcul la distance cartésienne entre deux points
#' @param x1 coordonnée x du premier point
#' @param y1 coordonnée y du premier point
#' @param x2 coordonnée x du second point
#' @param y2 coordonnée y du second point
#'
#' @return Elle renvoie la distance sous forme d'entier
#' @export
distance_cart <- function(x1, y1, x2, y2) {
return(sqrt((x2 - x1) ^ 2 + (y2 - y1) ^ 2))
}
#' @description Cette fonction prend en entrée une liste de triangle et
#' renvoie la somme des aires de ces triangles.
#'
#' @param liste_triangle C'est une liste de triangle du type :
#' liste_triangle = list([x11,y11,x21,y21,x31,y31],[x12,y12,x22,y22,x32,y32] ... )
#'
#' @return Elle renvoie l'air de ce triangle
#' @import heron
#' @export
#'
heron_liste <- function(liste_triangle) {
sum_aire <- 0
# On extrait les distances entre les sommets
for (i in seq_along(liste_triangle)) {
A_B <-
distance_cart(liste_triangle[[i]][1],
liste_triangle[[i]][2],
liste_triangle[[i]][3],
liste_triangle[[i]][4])
B_C <-
distance_cart(liste_triangle[[i]][3],
liste_triangle[[i]][4],
liste_triangle[[i]][5],
liste_triangle[[i]][6])
C_A <-
distance_cart(liste_triangle[[i]][5],
liste_triangle[[i]][6],
liste_triangle[[i]][1],
liste_triangle[[i]][2])
# On calcule l'air des triangles
sum_aire <- sum_aire + heron(A_B, B_C, C_A)
}
return(sum_aire)
}
#Construction d'un data frame avec les coordonnées des triangles
for (i in seq_along(liste_triangle)) {
df <- rbind(df, data.frame(
x = c(liste_triangle[[i]][1], liste_triangle[[i]][3], liste_triangle[[i]][5]),
y = c(liste_triangle[[i]][2], liste_triangle[[i]][4], liste_triangle[[i]][6]),
triangle_id = i
))
}
#' plot_triangles
#' @description #' Ainsi cette fonction permet de tracer tous les triangles dont les coordonnées sont rentrées dans
#' une liste.
#' @import ggplot2
#' @param liste_triangle le premier paramètres est une liste de triangles ordonnés de cette manière :
#' liste_triangle = list([x11,y11,x21,y21,x31,y31],[x12,y12,x22,y22,x32,y32] ... ).
#'
#' @return Cette fonction affiche sur un graphique tous les triangles.
#' @export
plot_triangles <- function(liste_triangle) {
df <- data.frame()
#Construction d'un data frame avec les coordonnées des triangles
for (i in seq_along(liste_triangle)) {
df <- rbind(df, data.frame(
x = c(liste_triangle[[i]][1], liste_triangle[[i]][3], liste_triangle[[i]][5]),
y = c(liste_triangle[[i]][2], liste_triangle[[i]][4], liste_triangle[[i]][6]),
triangle_id = i
))
}
#On trace les triangles
plot <- ggplot(df, aes(x, y, fill = factor(triangle_id))) +
geom_polygon(color = "black") +
scale_fill_manual(values = rep("black", length(liste_triangle)), guide = "none") +
theme_void()
return(plot)
}
tar_make()
tar_config_set(store = "posts/post-with-code/_targets",
script = "posts/post-with-code/_targets.R")
tar_config_set(store = "posts/post-with-code/_targets",
script = "posts/post-with-code/_targets.R")
tar_visnetwork()
tar_visnetwork()
tar_visnetwork()
tar_make()
#' distance_cart : distance cartèsienne
#' @description Cette fonction calcul la distance cartésienne entre deux points
#' @param x1 coordonnée x du premier point
#' @param y1 coordonnée y du premier point
#' @param x2 coordonnée x du second point
#' @param y2 coordonnée y du second point
#'
#' @return Elle renvoie la distance sous forme d'entier
#' @export
distance_cart <- function(x1, y1, x2, y2) {
return(sqrt((x2 - x1) ^ 2 + (y2 - y1) ^ 2))
}
#' @description Cette fonction prend en entrée une liste de triangle et
#' renvoie la somme des aires de ces triangles.
#'
#' @param liste_triangle C'est une liste de triangle du type :
#' liste_triangle = list([x11,y11,x21,y21,x31,y31],[x12,y12,x22,y22,x32,y32] ... )
#'
#' @return Elle renvoie l'air de ce triangle
#' @import heron
#' @export
#'
heron_liste <- function(liste_triangle) {
sum_aire <- 0
# On extrait les distances entre les sommets
for (i in seq_along(liste_triangle)) {
A_B <-
distance_cart(liste_triangle[[i]][1],
liste_triangle[[i]][2],
liste_triangle[[i]][3],
liste_triangle[[i]][4])
B_C <-
distance_cart(liste_triangle[[i]][3],
liste_triangle[[i]][4],
liste_triangle[[i]][5],
liste_triangle[[i]][6])
C_A <-
distance_cart(liste_triangle[[i]][5],
liste_triangle[[i]][6],
liste_triangle[[i]][1],
liste_triangle[[i]][2])
# On calcule l'air des triangles
sum_aire <- sum_aire + heron(A_B, B_C, C_A)
}
return(sum_aire)
}
#Construction d'un data frame avec les coordonnées des triangles
for (i in seq_along(liste_triangle)) {
df <- rbind(df, data.frame(
x = c(liste_triangle[[i]][1], liste_triangle[[i]][3], liste_triangle[[i]][5]),
y = c(liste_triangle[[i]][2], liste_triangle[[i]][4], liste_triangle[[i]][6]),
triangle_id = i
))
}
#' plot_triangles
#' @description #' Ainsi cette fonction permet de tracer tous les triangles dont les coordonnées sont rentrées dans
#' une liste.
#' @import ggplot2
#' @param liste_triangle le premier paramètres est une liste de triangles ordonnés de cette manière :
#' liste_triangle = list([x11,y11,x21,y21,x31,y31],[x12,y12,x22,y22,x32,y32] ... ).
#'
#' @return Cette fonction affiche sur un graphique tous les triangles.
#' @export
plot_triangles <- function(liste_triangle) {
df <- data.frame()
#Construction d'un data frame avec les coordonnées des triangles
for (i in seq_along(liste_triangle)) {
df <- rbind(df, data.frame(
x = c(liste_triangle[[i]][1], liste_triangle[[i]][3], liste_triangle[[i]][5]),
y = c(liste_triangle[[i]][2], liste_triangle[[i]][4], liste_triangle[[i]][6]),
triangle_id = i
))
}
#On trace les triangles
plot <- ggplot(df, aes(x, y, fill = factor(triangle_id))) +
geom_polygon(color = "black") +
scale_fill_manual(values = rep("black", length(liste_triangle)), guide = "none") +
theme_void()
return(plot)
}
#' @description Cette fonction prend en entrée une liste de triangle et
#' renvoie la somme des aires de ces triangles.
#'
#' @param liste_triangle C'est une liste de triangle du type :
#' liste_triangle = list([x11,y11,x21,y21,x31,y31],[x12,y12,x22,y22,x32,y32] ... )
#'
#' @return Elle renvoie l'air de ce triangle
#' @import heron
#' @export
#'
heron_liste <- function(liste_triangle) {
sum_aire <- 0
# On extrait les distances entre les sommets
for (i in seq_along(liste_triangle)) {
A_B <-
distance_cart(liste_triangle[[i]][1],
liste_triangle[[i]][2],
liste_triangle[[i]][3],
liste_triangle[[i]][4])
B_C <-
distance_cart(liste_triangle[[i]][3],
liste_triangle[[i]][4],
liste_triangle[[i]][5],
liste_triangle[[i]][6])
C_A <-
distance_cart(liste_triangle[[i]][5],
liste_triangle[[i]][6],
liste_triangle[[i]][1],
liste_triangle[[i]][2])
# On calcule l'air des triangles
sum_aire <- sum_aire + heron(A_B, B_C, C_A)
}
return(sum_aire)
}
#' plot_triangles
#' @description #' Ainsi cette fonction permet de tracer tous les triangles dont les coordonnées sont rentrées dans
#' une liste.
#' @import ggplot2
#' @param liste_triangle le premier paramètres est une liste de triangles ordonnés de cette manière :
#' liste_triangle = list([x11,y11,x21,y21,x31,y31],[x12,y12,x22,y22,x32,y32] ... ).
#'
#' @return Cette fonction affiche sur un graphique tous les triangles.
#' @export
plot_triangles <- function(liste_triangle) {
df <- data.frame()
#Construction d'un data frame avec les coordonnées des triangles
for (i in seq_along(liste_triangle)) {
df <- rbind(df, data.frame(
x = c(liste_triangle[[i]][1], liste_triangle[[i]][3], liste_triangle[[i]][5]),
y = c(liste_triangle[[i]][2], liste_triangle[[i]][4], liste_triangle[[i]][6]),
triangle_id = i
))
}
#On trace les triangles
plot <- ggplot(df, aes(x, y, fill = factor(triangle_id))) +
geom_polygon(color = "black") +
scale_fill_manual(values = rep("black", length(liste_triangle)), guide = "none") +
theme_void()
return(plot)
}
#' @description Cette fonction prend en entrée une liste de triangle et
#' renvoie la somme des aires de ces triangles.
#'
#' @param liste_triangle C'est une liste de triangle du type :
#' liste_triangle = list([x11,y11,x21,y21,x31,y31],[x12,y12,x22,y22,x32,y32] ... )
#'
#' @return Elle renvoie l'air de ce triangle
#' @import heron
#' @export
#'
heron_liste <- function(liste_triangle) {
sum_aire <- 0
# On extrait les distances entre les sommets
for (i in seq_along(liste_triangle)) {
A_B <-
distance_cart(liste_triangle[[i]][1],
liste_triangle[[i]][2],
liste_triangle[[i]][3],
liste_triangle[[i]][4])
B_C <-
distance_cart(liste_triangle[[i]][3],
liste_triangle[[i]][4],
liste_triangle[[i]][5],
liste_triangle[[i]][6])
C_A <-
distance_cart(liste_triangle[[i]][5],
liste_triangle[[i]][6],
liste_triangle[[i]][1],
liste_triangle[[i]][2])
# On calcule l'air des triangles
sum_aire <- sum_aire + heron(A_B, B_C, C_A)
}
return(sum_aire)
}
#' distance_cart : distance cartèsienne
#' @description Cette fonction calcul la distance cartésienne entre deux points
#' @param x1 coordonnée x du premier point
#' @param y1 coordonnée y du premier point
#' @param x2 coordonnée x du second point
#' @param y2 coordonnée y du second point
#'
#' @return Elle renvoie la distance sous forme d'entier
#' @export
distance_cart <- function(x1, y1, x2, y2) {
return(sqrt((x2 - x1) ^ 2 + (y2 - y1) ^ 2))
}
#' divide_liste_triangle
#' @description Cette fonciton prend une liste de triangle et renvoie une liste
#' composé des 4 triangles issus de la décomposition de Sierpinski.
#'
#' @param liste_triangle Une liste de coordonées de triangles
#'
#' @return liste 4 fois plus grandes, on applique l'algorithme de Sierpinski aux
#' triangles donnés en entrée.
#' @export
#'
divide_list_triangle <- function(liste_triangle){
sous_liste <- list()
for (i in liste_triangle){
sous_liste <- append(sous_liste,divide_triangle(i))
}
return(sous_liste)
}
tar_make()
tar_config_set(store = "posts/post-with-code/_targets",
script = "posts/post-with-code/_targets.R")
tar_visnetwork()
tar_make()
tar_make()
# This is an example _targets.R file. Every
# {targets} pipeline needs one.
# Use tar_script() to create _targets.R and tar_edit()
# to open it again for editing.
# Then, run tar_make() to run the pipeline
# and tar_read(summary) to view the results.
tar_source(files = "functions.R")
tar_make()
targets::tar_make()
tar_make()
tar_visnetwork()
tar_make()
??heron
??demi_perimetre
tar_visnetwork()
heron_liste(Iteration_1)
Iteration_1 <- divide_triangle(triangle_initial)
plot_triangles(Iteration_1)
heron_liste(Iteration_1)
?heron
Iteration_1
#' @description Cette fonction prend en entrée une liste de triangle et
#' renvoie la somme des aires de ces triangles.
#'
#' @param liste_triangle C'est une liste de triangle du type :
#' liste_triangle = list([x11,y11,x21,y21,x31,y31],[x12,y12,x22,y22,x32,y32] ... )
#'
#' @return Elle renvoie l'air de ce triangle
#' @import heron
#' @export
#'
heron_liste <- function(liste_triangle) {
sum_aire <- 0
# On extrait les distances entre les sommets
for (i in seq_along(liste_triangle)) {
A_B <-
distance_cart(liste_triangle[[i]][1],
liste_triangle[[i]][2],
liste_triangle[[i]][3],
liste_triangle[[i]][4])
B_C <-
distance_cart(liste_triangle[[i]][3],
liste_triangle[[i]][4],
liste_triangle[[i]][5],
liste_triangle[[i]][6])
C_A <-
distance_cart(liste_triangle[[i]][5],
liste_triangle[[i]][6],
liste_triangle[[i]][1],
liste_triangle[[i]][2])
# On calcule l'air des triangles
sum_aire <- sum_aire + heron(A_B, B_C, C_A)
}
return(sum_aire)
}
heron_liste(Iteration_1)
remotes::install_github("gabammour/heron")
renv::snapshot()
tar_make()
tar_visnetwork()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
```{r, echo=FALSE, message=FALSE}
---
title: "Sierpiński triangle"
---
title: "Projet : R avancé et introduction à Git"
install.packages("caret")
library(caret)
library(rlang)
install.packages("rlang")
install.packages(vctrs)
install.packages("vctrs")
library(DiscriMiner)
# development version
library(devtools)
install.packages("devtools")
# development version
library(devtools)
install_github('DiscriMiner',  username='gastonstat')
library(dplyr)
library(tidyverse)
library(ggplot2)
library(parallel)
library(FactoMineR)
library(factoextra)
library(caret)
library(caret)
library(klaR)
library(NbClust)
library(dendextend)
library(readr)
library(dplyr)
library(knitr)
library(DiscriMiner)
library(datawizard)
library(MASS)
library(pls)
library(plsRglm)
library(plsRglm)
library(mdatools)
library(FactoMineR)
library(mixOmics)
# development version
library(devtools)
install_github('DiscriMiner',  username='gastonstat')
install.packages("DiscriMiner")
install_github("mixOmicsTeam/mixOmics")
library(devtools)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(parallel)
library(FactoMineR)
library(factoextra)
library(caret)
library(klaR)
library(NbClust)
library(dendextend)
library(readr)
library(dplyr)
library(knitr)
library(DiscriMiner)
library(datawizard)
library(MASS)
library(pls)
library(DiscriMiner)
# Charger les données
df <- read.csv2("phoneme.csv", sep = ",")
# Charger les données
df <- read.csv2("base.csv", sep = ",")
# Déplacer la dernière colonne en première position :
df <- df %>%
relocate(names(df)[ncol(df)], .before = names(df)[1])
# Déplacer la colonne "g" en première position :
df <- df %>%
relocate(g, .before = names(df)[1])
install.packages("rgeoda")
library(rgeoda)
ggplot(color_branches(arbre, k = 3), labels = FALSE,
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "#FFFFF6")))
`renv::status()`
renv::status()
renv::restore()
library(caret)
library(rlang)
install.packages("caret")
install.packages("vctrs")
install.packages("tibble")
## Le projet
renv::status()
renv::snapshot()
y
Afin de vous donnner une idée de notre projet, je vous propose de jeter un oeil au support de notre soutenance finale.
Afin de vous donnner une idée de notre projet, je vous propose de jeter un oeil au support de notre soutenance finale.
source("library.R")
library(randomForest)
install.packages("randomForest")
library(partykit)
library(caret)
library(randomForest)
install.packages("randomForest")
{
library(devtools)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(parallel)
library(FactoMineR)
library(factoextra)
library(caret)
library(klaR)
library(NbClust)
library(dendextend)
library(readr)
library(knitr)
library(datawizard)
library(MASS)
library(pls)
library(plsRglm)
library(mdatools)
library(mixOmics)
library(rgeoda)
library(rlang)
library(vctrs)
}
